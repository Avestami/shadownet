generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  username       String   @unique
  email          String?  @unique
  password       String   // Hashed password
  score          Int      @default(0)
  karma          Json     @default("{\"loyalty\": 0, \"defiance\": 0, \"mercy\": 0, \"curiosity\": 0, \"integration\": 0}")
  choices        Json     @default("[]")
  flagsCaptured  String[] @default([])
  currentLevel   String   @default("alpha")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  sessions       Session[]
  unlockedLevels LevelUnlock[]
  playerChoices  PlayerChoice[]
  karmaChoices   KarmaChoice[]
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Level {
  id          String   @id
  name        String
  description String?
  videoUrl    String?
  audioUrl    String?
  unlockCode  String
  scoreReward Int      @default(100)
  nextLevelId String?  @unique
  sequence    Int      @default(0)
  narrative   String   @default("")
  availableKarmaChoices Json    @default("[]") // Array of available karma choices for the level
  documents   Json     @default("[]") // Array of narrative documents available in the level
  hints       Json     @default("[]") // Array of hints unlocked by karma choices
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  nextLevel     Level?        @relation("LevelSequence", fields: [nextLevelId], references: [id])
  previousLevel Level?        @relation("LevelSequence")
  unlockedBy    LevelUnlock[]
  choices       PlayerChoice[]
  karmaChoices  KarmaChoice[]
  audioFiles    AudioFile[]
}

model LevelUnlock {
  id        String   @id @default(uuid())
  userId    String
  levelId   String
  unlockedAt DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  level Level @relation(fields: [levelId], references: [id], onDelete: Cascade)

  @@unique([userId, levelId])
}

model PlayerChoice {
  id          String   @id @default(uuid())
  userId      String
  levelId     String
  choiceKey   String
  choiceValue String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  level Level @relation(fields: [levelId], references: [id], onDelete: Cascade)

  @@unique([userId, levelId, choiceKey])
}

model KarmaChoice {
  id          String   @id @default(uuid())
  userId      String
  levelId     String
  karmaType   String   // loyalty, defiance, mercy, curiosity, integration
  karmaValue  Int
  choiceText  String   // Description of the choice made
  createdAt   DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  level Level @relation(fields: [levelId], references: [id], onDelete: Cascade)
}

model AudioFile {
  id          String   @id @default(uuid())
  levelId     String
  filename    String
  description String?
  frequency   Float?   // For storing frequency data when relevant
  isCorrupted Boolean  @default(false)
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  level Level @relation(fields: [levelId], references: [id], onDelete: Cascade)

  @@unique([levelId, filename])
}
