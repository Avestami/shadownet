// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String?  @unique
  password  String // Hashed password
  score     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sessions       Session[]
  unlockedLevels LevelUnlock[]
  choices        PlayerChoice[]
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Level {
  id          String   @id
  name        String
  description String?
  videoUrl    String?
  audioUrl    String?
  unlockCode  String
  scoreReward Int      @default(100)
  nextLevelId String?  @unique
  sequence    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  nextLevel     Level?         @relation("LevelSequence", fields: [nextLevelId], references: [id])
  previousLevel Level?         @relation("LevelSequence")
  unlockedBy    LevelUnlock[]
  choices       PlayerChoice[]
}

model LevelUnlock {
  id         String   @id @default(uuid())
  userId     String
  levelId    String
  unlockedAt DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  level Level @relation(fields: [levelId], references: [id], onDelete: Cascade)

  @@unique([userId, levelId])
}

model PlayerChoice {
  id          String   @id @default(uuid())
  userId      String
  levelId     String
  choiceKey   String
  choiceValue String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  level Level @relation(fields: [levelId], references: [id], onDelete: Cascade)

  @@unique([userId, levelId, choiceKey])
}
